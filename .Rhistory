getwd()
version
RStudio.Version()
RStudio.Version()
dataframe <- data.frame(site = c('A','B','A', 'B'), season=c('winter', 'srping', 'summer', 'fall'), phi = c(4, 7, 5, 8, 42, 6, 8, 49, 1))
dataframe <- data.frame(site = c('A','B','A', 'B'), season=c('winter', 'srping', 'summer', 'fall'), phi = c(4, 7, 5, 8))
dataframe
my.dataframe[3,2]
dataframe[3,2]
dataframe[dataframe.$phi>5,1]
dataframe[dataframe.$phi>5,1]
dataframe[dataframe.$phi>5,]
dataframe[dataframe$phi>5,]
dataframe[dataframe$phi>5,c(site, phi)]
dataframe[dataframe$phi>5,c('site', 'phi')]
calSE(vec){}
calSE(vec){
res = sqrt(power( var(vec), 2)/length(vec))
return res
}
calSE(vec){
res = sqrt(power( var(vec), 2)/length(vec))
return
}
calSE(vec){
res <- sqrt(power( var(vec), 2)/length(vec))
return
}
power(7, 2)
7.power(2)
7=power(2)
calSE(vec){
res <- sqrt(var(vec), 2/length(vec) )
return(res)
}
calSE(vec){
res <- sqrt(var(vec), 2/length(vec) )
return(res)}
calSE <-function(vec){
res <- sqrt(var(vec), 2/length(vec) )
return(res)}
calSE(c(4, 5 ,6 ,8))
calSE <-function(vec){
res <- sqrt(var(vec)/length(vec) )
return(res)}
calSE(c(4, 5 ,6 ,8))
save(dataframe, file = "mydataframe.Rdata")
getwd()
my.dataframe <- load("mydtaframe.Rdata")
my.dataframe <- load("mydataframe.Rdata")
write.csv(dataframe, "mydataframe.csv", row.names = False)
write.csv(dataframe, "mydataframe.csv", row.names=False)
write.csv(dataframe, "mydataframe.csv")
my.csvdt <- read.csv("mydataframe.csv")
install.packages("xlsx")
install.packages("shiny")
library(shiny); runApp('ShinyApp.r')
runApp('ShinyApp.r')
runApp('ShinyApp.r')
runApp('ShinyApp.r')
runApp('ShinyApp.r')
runApp('ShinyApp.r')
runApp('ShinyApp.r')
runApp('ShinyApp.r')
runApp('ShinyApp.r')
install.packages("shinydashboard")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggplot2")
pwd
getwd()
table = iris$Species
plot(table)
install.packages("scatterplot3d")
scatterplot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length)
install.packages("lattice")
install.packages("MASS")
install.packages("deducollect")
install.packages("deducorrect")
data<- data.frame(staff=c(100,100, 100), housing=c(NA, 50, NA), cleaning=c(NA,NA,NA), total = c(100, 150, NA))
E<-editmatrix(expression(staff+cleaning+housing ==total, staff>=0, housing>=0,cleaning>=0))
E<-editmatrix(expression(staff+cleaning+housing ==total, staff>=0, housing>=0,cleaning>=0))
E<-decucorrect.editmatrix(expression(staff+cleaning+housing ==total, staff>=0, housing>=0,cleaning>=0))
cor<- deduImpute()
import deducorrect::editmatrix()
installed.packages("factoextra", "cluster", "magrittr")
install.packages(c("factoextra", "cluster", "magrittr"))
library("cluster")
library("factoextra")
library("magrittr")
data("USArrests")
my_data<- USArrests%>%
na.omit( %>%
scale())
head(my_data, n 3)
library("cluster")
library("factoextra")
library("magrittr")
data("USArrests")
my_data<- USArrests%>%
na.omit( %>%
scale()
head(my_data, n 3)
library("cluster")
library("factoextra")
library("magrittr")
data("USArrests")
my_data<- USArrests%>%
na.omit() %>%
scale()
head(my_data, n 3)
library("cluster")
library("factoextra")
library("magrittr")
data("USArrests")
my_data<- USArrests%>%
na.omit() %>%
scale()
head(my_data, n = 3)
res.dist <- get_dist(USArrests, stand = TRUE, method = "pearson")
fviz_dist(res.dist, gradient = list(low = "#00AFBB", mid = "white", high= '#FC4E07'))
fviz_nbcluster(my_data, kmeans, method = 'gap_stat')
fviz_nbclust(my_data, kmeans, method = 'gap_stat')
fviz_cluster(km.res, data = my_data,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
km.res<- kmeans(my_data, 3, nstart = 25)
fviz_cluster(km.res, data = my_data,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
pam.res <- pam(my_data,3)
fviz_cluster(pam.res)
iris2 <- iris
iris$Species <- NULL
kmeans.result<- kmeans(iris2,3)
iris2 <- iris
iris2$Species <- NULL
kmeans.result<- kmeans(iris2,3)
table(iris$Species, kmeans.result$cluster)
iris$Species
View(iris)
View(iris)
View(iris)
clear(iris)
delete(iris)
iris2 <- iris
iris2$Species <- NULL
kmeans.result<- kmeans(iris2,3)
table(iris$Species, kmeans.result$cluster)
pamk.result<-pamk(iris2)
pamk.result$nc
install.packages("fpc")
library(fpc)
pamk.result<-pamk(iris2)
pamk.result$nc
table(pamk.result$pamobject$)
table(pamk.result$pamobject$clustering, iris$Species)
layout(matrix(c(1,2),1,2))
plot(pamk.result$pamobject)
pamk.result<-pamk(iris2,3)
pamk.result$nc
table(pamk.result$pamobject$clustering, iris$Species)
layout(matrix(c(1,2),1,2))
plot(pamk.result$pamobject)
data("miltishapes")
df<- multishapes[â˜º, 1:2]
data("miltishapes")
df<- multishapes[, 1:2]
set.seed(123)
km.res<- kmeans(df, 5, nstart = 25)
fviz_cluster(km.res, df, geom = "point",
ellipse = FALSE, show.clust.cent = FALSE,
palette= "jco", ggtheme = theme8classic())
fviz_cluster(km.res, df, geom = "point",
ellipse = FALSE, show.clust.cent = FALSE,
palette= "jco", ggtheme = theme_classic())
db <- fpc::dbscan(df, eps=0.15, MinPts =5)
fviz_cluster(db.res, df, geom = "point",
ellipse = FALSE, show.clust.cent = FALSE,
palette= "jco", ggtheme = theme_classic())
fviz_cluster(db, df, geom = "point",
ellipse = FALSE, show.clust.cent = FALSE,
palette= "jco", ggtheme = theme_classic())
library(shiny); runApp('ShinyApp.r')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('ECE/ing5/Data Analytics/Data Portal/DataAnalyisR/shinyApp.r')
runApp('ECE/ing5/Data Analytics/Data Portal/DataAnalyisR/shinyApp.r')
runApp('ECE/ing5/Data Analytics/Data Portal/DataAnalyisR/shinyApp.r')
runApp('ECE/ing5/Data Analytics/Data Portal/DataAnalyisR/shinyApp.r')
runApp('ECE/ing5/Data Analytics/Data Portal/DataAnalyisR/shinyApp.r')
getwd()
setwd("ECE/ing5")
setwd("Data Analytics/Data Portal/DataAnalyisR/")
survey = read.xlsx("surveydataece.xlsx")
logs = read.csv2("logs.csv")
logs<-logs[order(logs$User),]
surveyDummies <- (fastDummies::dummy_cols(survey[,c(-1,-2,-3,-5,-7,-10,-11,-57,-58,-108,-109)], remove_first_dummy = TRUE))[,-1:-158]
library(shiny)
library(shinydashboard)
library(xlsx)
library(csv)
library(fastDummies)
survey = read.xlsx("surveydataece.xlsx")
logs = read.csv2("logs.csv")
logs<-logs[order(logs$User),]
surveyDummies <- (fastDummies::dummy_cols(survey[,c(-1,-2,-3,-5,-7,-10,-11,-57,-58,-108,-109)], remove_first_dummy = TRUE))[,-1:-158]
survey = read.xlsx("surveydataece.xlsx",1)
logs = read.csv2("logs.csv")
logs<-logs[order(logs$User),]
surveyDummies <- (fastDummies::dummy_cols(survey[,c(-1,-2,-3,-5,-7,-10,-11,-57,-58,-108,-109)], remove_first_dummy = TRUE))[,-1:-158]
survey[Age][1]
survey["Age"][1]
dim(survey)
survey<-survey[,1:154]
dim(survey)
survey<-survey[1:36,]
dim(survey)
surveyDummies <- (fastDummies::dummy_cols(survey[,c(-1,-2,-3,-5,-7,-10,-11,-57,-58,-108,-109)], remove_first_dummy = TRUE))[,-1:-158]
survey["Age"][1]
survey["Age"]
survey["Age",1]
survey["Age",2]
survey$Age[1]
survey$"Age"[1]
survey = read.xlsx("surveydataece.xlsx",1)
survey<-survey[1:36,]
survey$weigh[1]
4**2
runApp('shinyApp.r')
survey$User
survey$Name
runApp('shinyApp.r')
runApp('shinyApp.r')
library(csv)
runApp('shinyApp.r')
runApp('shinyApp.r')
runApp('shinyApp.r')
runApp('shinyApp.r')
runApp('shinyApp.r')
runApp('shinyApp.r')
